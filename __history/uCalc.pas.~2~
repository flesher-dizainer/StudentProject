unit uCalc;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics, StrUtils, System.Types,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls;

type
  TMatrix = array of array of double;
  TArrayDouble = array of double;
type data_matrix = record
    Matrix : TMatrix;
    ArrayDouble : TArrayDouble;
end;
  TFormCalc = class(TForm)
    Memo1: TMemo;
    Button1: TButton;
    Label1: TLabel;
    Label2: TLabel;
    Edit1: TEdit;
    Label3: TLabel;
    Edit2: TEdit;
    procedure Button1Click(Sender: TObject);
    function GaussianElimination(var A: TMatrix; var B: TArrayDouble;
      N: Integer): TArrayDouble;
    function get_TMatrix(memo_lines: TMemo): TMatrix;
    function get_TArrayDouble(edit: TEdit): TArrayDouble;
    function StrToFloatMod(value: string): real;
    function MatrixCalc(matrix: TMatrix; ArrDouble: TArrayDouble): TArrayDouble;
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  FormCalc: TFormCalc;

implementation

{$R *.dfm}

// Процедура, реализующая метод Гаусса
function TFormCalc.GaussianElimination(var A: TMatrix; var B: TArrayDouble;
  N: Integer): TArrayDouble;

var
  i, j, k: Integer;
  factor: real;
begin
  setlength(result, N);
  // Приведение матрицы к треугольному виду
  for i := 0 to N - 2 do
    for j := i + 1 to N - 1 do
    begin
      factor := A[j, i] / A[i, i];
      for k := i to N - 1 do
        A[j, k] := A[j, k] - factor * A[i, k];
      B[j] := B[j] - factor * B[i];
    end;

  // Обратный ход для нахождения решения
  for i := N - 1 downto 0 do
  begin
    result[i] := B[i];
    for j := i + 1 to N - 1 do
      result[i] := result[i] - A[i, j] * result[j];
    result[i] := result[i] / A[i, i];
  end;
end;

procedure TFormCalc.Button1Click(Sender: TObject);
var
  matrix: TMatrix;
  R_Array: TArrayDouble;
  Res: TArrayDouble;
  i: real;
begin
  matrix := get_TMatrix(self.Memo1);
  R_Array := get_TArrayDouble(self.Edit1);
  Res:=MatrixCalc(matrix, R_Array);
  //Res := GaussianElimination(matrix, R_Array, length(matrix));
  Edit2.Text := '';
  // выводим результат
  for i in Res do
    Edit2.Text := Edit2.Text + ' ' + FloatToStr(i);

end;

function TFormCalc.get_TMatrix(memo_lines: TMemo): TMatrix;
var
  i: Integer;
  str_line: string;
  arr_list: TStringDynArray;
begin
  i := 0;
  setlength(result, 0);
  for str_line in memo_lines.Lines do
  begin
    setlength(result, length(result) + 1);
    arr_list := SplitString(str_line, ' ');
    setlength(result[length(result) - 1], length(arr_list));
    for i := 0 to length(arr_list) - 1 do
      result[length(result) - 1][i] := StrToFloatMod(arr_list[i]);
  end;

end;

function TFormCalc.get_TArrayDouble(edit: TEdit): TArrayDouble;
var
  i: Integer;
  arr_list: TStringDynArray;
begin
  arr_list := SplitString(edit.Text, ' ');
  setlength(result, length(arr_list));
  for i := 0 to length(arr_list) - 1 do
    result[i] := StrToFloatMod(arr_list[i]);
end;

function TFormCalc.StrToFloatMod(value: string): real;
begin
  try
    result := StrToFloat(StringReplace(value, '.', ',',
      [rfReplaceAll, rfIgnoreCase]));
    exit;
  except
    result := StrToFloat(StringReplace(value, '.', ',',
      [rfReplaceAll, rfIgnoreCase]));
    exit;
    result := StrToFloat(StringReplace(value, ',', '.',
      [rfReplaceAll, rfIgnoreCase]));
    exit;
  end;
end;

function swap_line_matrix(matrix: TMatrix; row1: Integer;
  row2: Integer; R_line:TArrayDouble): data_matrix;
var
  tmp: double;
  i: Integer;
begin
  for i := 0 to length(matrix[0]) - 1 do
  begin
    tmp := matrix[row1][i];
    matrix[row1][i] := matrix[row2][i];
    matrix[row2][i] := tmp;
  end;
  tmp := R_line[row1];
  R_line[row1]:=R_line[row2];
  R_line[row2]:=tmp;
  result.Matrix := matrix;
  result.ArrayDouble:=R_line;
end;

function MinLineToTop(matrix: TMatrix; arrDouble:TArrayDouble): data_matrix;
var
  i: Integer;
  flag_swap: boolean;
  ret:data_matrix;
begin
  while True do
  begin
    flag_swap := False;
    for i := 0 to length(matrix) - 2 do
    begin
      if matrix[i][0] > matrix[i + 1][0] then
      begin
        ret:=swap_line_matrix(matrix, i, i + 1, arrDouble);
        matrix:=ret.Matrix;
        arrDouble:=ret.ArrayDouble;
        flag_swap := True;
      end;

    end;
    if not flag_swap then
      break;

  end;
  result.Matrix := matrix;
  result.ArrayDouble:=arrDouble;
end;
//-----------------------------
function Triangularize(matrix: TMatrix; b: TArrayDouble): data_matrix;
var
  i, j, k: Integer;
  factor: Double;

begin
  for i := Low(matrix) to High(matrix) - 1 do
  begin
    for j := i + 1 to High(matrix) do
    begin
      factor := matrix[j][i] / matrix[i][i];

      for k := i to High(matrix) do
      begin
        matrix[j][k] := matrix[j][k] - factor * matrix[i][k];
        b[j] := b[j] - factor * b[i]; // Добавляем умножение на factor к правой части СЛАУ
      end;
    end;
  end;

  Result.Matrix := matrix;
  Result.ArrayDouble:=b;
end;


//-----------------------------
//a11 a12 a13
//a21 a22 a23
//a31 a32 a33
//function TFormCalc.MatrixCalc(matrix: TMatrix; ArrDouble: TArrayDouble)
//  : TArrayDouble;
//var
//  A, B: Integer;
//  koeff, tmp_0:real;
//  ret:data_matrix;
//begin
//  // составляем матрицу так, чтоб минимальное первое число было вверху
//  ret:=MinLineToTop(matrix, ArrDouble);
//  matrix:=ret.Matrix;
//  ArrDouble:=ret.ArrayDouble;
//  //Чтобы обнулить элемент a21, вычитаем из второй строки первую строку,
//  //умноженную на a21/a11. Получаем: 0 a22-a21*a12/a11  a23-a21*a13/a11
//  ret:=Triangularize(matrix, ArrDouble);
//  matrix:=ret.Matrix;
//  ArrDouble:=ret.ArrayDouble;
//
//end;
function TFormCalc.MatrixCalc(matrix: TMatrix; ArrDouble: TArrayDouble)
  : TArrayDouble;
var
  A, B: Integer;
  koeff, tmp_0:real;
  ret:data_matrix;
begin
  // составляем матрицу так, чтоб минимальное первое число было вверху
  ret:=MinLineToTop(matrix, ArrDouble);
  matrix:=ret.Matrix;
  ArrDouble:=ret.ArrayDouble;

  ret:=Triangularize(matrix, ArrDouble);
  matrix:=ret.Matrix;
  ArrDouble:=ret.ArrayDouble;

end;
end.
